// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  username       String?   @unique
  image          String?
  hashedPassword String?
  balance        Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  itemIds        String[]  @db.ObjectId
  winItemIds     String[]  @db.ObjectId
  biddedIds      String[]  @db.ObjectId
  listedItems    Item[]    @relation("UserItems")
  winItems       Item[]    @relation("WinItem")
  watchedItems   Item[]    @relation("WatchedItems", fields: [itemIds], references: [id])
  biddedItems    Item[]    @relation("BidderId", fields: [biddedIds], references: [id])

  bids     Bid[]
  accounts Account[]
  history  History[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model History {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  amount    Int
  itemId    String?  @db.ObjectId
  action    String
  isActive  Boolean
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      Item?    @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Bid {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  itemId    String   @db.ObjectId
  createdAt DateTime @default(now())
  action    String
  isActive  Boolean
  amount    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      Item     @relation(fields: [itemId], references: [id])
}

model Item {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean
  category     String
  imageSrc     String
  buyoutPrice  Int
  initialPrice Int
  isEnded      Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @db.ObjectId
  winnerId     String?  @db.ObjectId
  bidId        String?  @db.ObjectId
  userIds      String[] @db.ObjectId
  bidderIds    String[] @db.ObjectId
  owner        User     @relation("UserItems", fields: [userId], references: [id], onDelete: Cascade)
  watchBy      User[]   @relation("WatchedItems", fields: [userIds], references: [id])
  bidders      User[]   @relation("BidderId", fields: [bidderIds], references: [id])
  winner       User?    @relation("WinItem", fields: [winnerId], references: [id])

  bids    Bid[]
  History History[]
}
